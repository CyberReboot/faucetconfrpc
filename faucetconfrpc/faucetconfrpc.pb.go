// Use generate_pb_grpc.sh to regenerate protobuf and gRPC service definitions.
// Paths and package names here, together with the directory this file resides in, are critical
// for gRPC to work in multiple languages.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: protos/faucetconfrpc/faucetconfrpc.proto

package faucetconfserver

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Retrieve YAML config.
type GetConfigFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: retrieve YAML from this file.
	ConfigFilename string `protobuf:"bytes,1,opt,name=config_filename,json=configFilename,proto3" json:"config_filename,omitempty"`
}

func (x *GetConfigFileRequest) Reset() {
	*x = GetConfigFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigFileRequest) ProtoMessage() {}

func (x *GetConfigFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigFileRequest.ProtoReflect.Descriptor instead.
func (*GetConfigFileRequest) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{0}
}

func (x *GetConfigFileRequest) GetConfigFilename() string {
	if x != nil {
		return x.ConfigFilename
	}
	return ""
}

type GetConfigFileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigYaml string `protobuf:"bytes,1,opt,name=config_yaml,json=configYaml,proto3" json:"config_yaml,omitempty"`
}

func (x *GetConfigFileReply) Reset() {
	*x = GetConfigFileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigFileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigFileReply) ProtoMessage() {}

func (x *GetConfigFileReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigFileReply.ProtoReflect.Descriptor instead.
func (*GetConfigFileReply) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{1}
}

func (x *GetConfigFileReply) GetConfigYaml() string {
	if x != nil {
		return x.ConfigYaml
	}
	return ""
}

// Set current YAML config, optionally merging or overwriting.
type SetConfigFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigFilename string `protobuf:"bytes,1,opt,name=config_filename,json=configFilename,proto3" json:"config_filename,omitempty"`
	ConfigYaml     string `protobuf:"bytes,2,opt,name=config_yaml,json=configYaml,proto3" json:"config_yaml,omitempty"`
	// If true, then merge new YAML dict in with current.
	Merge bool `protobuf:"varint,3,opt,name=merge,proto3" json:"merge,omitempty"`
	// If set, execute YAML delete per DelConfigFromFileRequest, below.
	DelConfigYamlKeys string `protobuf:"bytes,4,opt,name=del_config_yaml_keys,json=delConfigYamlKeys,proto3" json:"del_config_yaml_keys,omitempty"`
}

func (x *SetConfigFileRequest) Reset() {
	*x = SetConfigFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigFileRequest) ProtoMessage() {}

func (x *SetConfigFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigFileRequest.ProtoReflect.Descriptor instead.
func (*SetConfigFileRequest) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{2}
}

func (x *SetConfigFileRequest) GetConfigFilename() string {
	if x != nil {
		return x.ConfigFilename
	}
	return ""
}

func (x *SetConfigFileRequest) GetConfigYaml() string {
	if x != nil {
		return x.ConfigYaml
	}
	return ""
}

func (x *SetConfigFileRequest) GetMerge() bool {
	if x != nil {
		return x.Merge
	}
	return false
}

func (x *SetConfigFileRequest) GetDelConfigYamlKeys() string {
	if x != nil {
		return x.DelConfigYamlKeys
	}
	return ""
}

type SetConfigFileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetConfigFileReply) Reset() {
	*x = SetConfigFileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigFileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigFileReply) ProtoMessage() {}

func (x *SetConfigFileReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigFileReply.ProtoReflect.Descriptor instead.
func (*SetConfigFileReply) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{3}
}

// Delete a YAML config tree/list item.
type DelConfigFromFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: delete YAML from this file.
	ConfigFilename string `protobuf:"bytes,1,opt,name=config_filename,json=configFilename,proto3" json:"config_filename,omitempty"`
	// '[key1, key2', 99]' will delete {key1: {key2: 99}}
	// '[key1, key2']' will delete {key1: {key2}}
	ConfigYamlKeys string `protobuf:"bytes,2,opt,name=config_yaml_keys,json=configYamlKeys,proto3" json:"config_yaml_keys,omitempty"`
}

func (x *DelConfigFromFileRequest) Reset() {
	*x = DelConfigFromFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelConfigFromFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelConfigFromFileRequest) ProtoMessage() {}

func (x *DelConfigFromFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelConfigFromFileRequest.ProtoReflect.Descriptor instead.
func (*DelConfigFromFileRequest) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{4}
}

func (x *DelConfigFromFileRequest) GetConfigFilename() string {
	if x != nil {
		return x.ConfigFilename
	}
	return ""
}

func (x *DelConfigFromFileRequest) GetConfigYamlKeys() string {
	if x != nil {
		return x.ConfigYamlKeys
	}
	return ""
}

type DelConfigFromFileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelConfigFromFileReply) Reset() {
	*x = DelConfigFromFileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelConfigFromFileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelConfigFromFileReply) ProtoMessage() {}

func (x *DelConfigFromFileReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelConfigFromFileReply.ProtoReflect.Descriptor instead.
func (*DelConfigFromFileReply) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{5}
}

// Add mirroring to a port.
type AddPortMirrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DpName       string `protobuf:"bytes,1,opt,name=dp_name,json=dpName,proto3" json:"dp_name,omitempty"`
	PortNo       uint32 `protobuf:"varint,2,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
	MirrorPortNo uint32 `protobuf:"varint,3,opt,name=mirror_port_no,json=mirrorPortNo,proto3" json:"mirror_port_no,omitempty"`
}

func (x *AddPortMirrorRequest) Reset() {
	*x = AddPortMirrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPortMirrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPortMirrorRequest) ProtoMessage() {}

func (x *AddPortMirrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPortMirrorRequest.ProtoReflect.Descriptor instead.
func (*AddPortMirrorRequest) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{6}
}

func (x *AddPortMirrorRequest) GetDpName() string {
	if x != nil {
		return x.DpName
	}
	return ""
}

func (x *AddPortMirrorRequest) GetPortNo() uint32 {
	if x != nil {
		return x.PortNo
	}
	return 0
}

func (x *AddPortMirrorRequest) GetMirrorPortNo() uint32 {
	if x != nil {
		return x.MirrorPortNo
	}
	return 0
}

type AddPortMirrorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddPortMirrorReply) Reset() {
	*x = AddPortMirrorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPortMirrorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPortMirrorReply) ProtoMessage() {}

func (x *AddPortMirrorReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPortMirrorReply.ProtoReflect.Descriptor instead.
func (*AddPortMirrorReply) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{7}
}

// Remove mirroring from a port.
type RemovePortMirrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DpName       string `protobuf:"bytes,1,opt,name=dp_name,json=dpName,proto3" json:"dp_name,omitempty"`
	PortNo       uint32 `protobuf:"varint,2,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
	MirrorPortNo uint32 `protobuf:"varint,3,opt,name=mirror_port_no,json=mirrorPortNo,proto3" json:"mirror_port_no,omitempty"`
}

func (x *RemovePortMirrorRequest) Reset() {
	*x = RemovePortMirrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePortMirrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePortMirrorRequest) ProtoMessage() {}

func (x *RemovePortMirrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePortMirrorRequest.ProtoReflect.Descriptor instead.
func (*RemovePortMirrorRequest) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{8}
}

func (x *RemovePortMirrorRequest) GetDpName() string {
	if x != nil {
		return x.DpName
	}
	return ""
}

func (x *RemovePortMirrorRequest) GetPortNo() uint32 {
	if x != nil {
		return x.PortNo
	}
	return 0
}

func (x *RemovePortMirrorRequest) GetMirrorPortNo() uint32 {
	if x != nil {
		return x.MirrorPortNo
	}
	return 0
}

type RemovePortMirrorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemovePortMirrorReply) Reset() {
	*x = RemovePortMirrorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePortMirrorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePortMirrorReply) ProtoMessage() {}

func (x *RemovePortMirrorReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePortMirrorReply.ProtoReflect.Descriptor instead.
func (*RemovePortMirrorReply) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{9}
}

// Overwrite ACL list on a port.
type SetPortAclRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DpName string `protobuf:"bytes,1,opt,name=dp_name,json=dpName,proto3" json:"dp_name,omitempty"`
	PortNo uint32 `protobuf:"varint,2,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
	Acls   string `protobuf:"bytes,3,opt,name=acls,proto3" json:"acls,omitempty"`
}

func (x *SetPortAclRequest) Reset() {
	*x = SetPortAclRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPortAclRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPortAclRequest) ProtoMessage() {}

func (x *SetPortAclRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPortAclRequest.ProtoReflect.Descriptor instead.
func (*SetPortAclRequest) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{10}
}

func (x *SetPortAclRequest) GetDpName() string {
	if x != nil {
		return x.DpName
	}
	return ""
}

func (x *SetPortAclRequest) GetPortNo() uint32 {
	if x != nil {
		return x.PortNo
	}
	return 0
}

func (x *SetPortAclRequest) GetAcls() string {
	if x != nil {
		return x.Acls
	}
	return ""
}

type SetPortAclReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPortAclReply) Reset() {
	*x = SetPortAclReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPortAclReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPortAclReply) ProtoMessage() {}

func (x *SetPortAclReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPortAclReply.ProtoReflect.Descriptor instead.
func (*SetPortAclReply) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{11}
}

type AddPortAclRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DpName string `protobuf:"bytes,1,opt,name=dp_name,json=dpName,proto3" json:"dp_name,omitempty"`
	PortNo uint32 `protobuf:"varint,2,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
	Acl    string `protobuf:"bytes,3,opt,name=acl,proto3" json:"acl,omitempty"`
}

func (x *AddPortAclRequest) Reset() {
	*x = AddPortAclRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPortAclRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPortAclRequest) ProtoMessage() {}

func (x *AddPortAclRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPortAclRequest.ProtoReflect.Descriptor instead.
func (*AddPortAclRequest) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{12}
}

func (x *AddPortAclRequest) GetDpName() string {
	if x != nil {
		return x.DpName
	}
	return ""
}

func (x *AddPortAclRequest) GetPortNo() uint32 {
	if x != nil {
		return x.PortNo
	}
	return 0
}

func (x *AddPortAclRequest) GetAcl() string {
	if x != nil {
		return x.Acl
	}
	return ""
}

type AddPortAclReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddPortAclReply) Reset() {
	*x = AddPortAclReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPortAclReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPortAclReply) ProtoMessage() {}

func (x *AddPortAclReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPortAclReply.ProtoReflect.Descriptor instead.
func (*AddPortAclReply) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{13}
}

// Remove named ACL from port, or all if no ACL name.
type RemovePortAclRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DpName string `protobuf:"bytes,1,opt,name=dp_name,json=dpName,proto3" json:"dp_name,omitempty"`
	PortNo uint32 `protobuf:"varint,2,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
	Acl    string `protobuf:"bytes,3,opt,name=acl,proto3" json:"acl,omitempty"`
}

func (x *RemovePortAclRequest) Reset() {
	*x = RemovePortAclRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePortAclRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePortAclRequest) ProtoMessage() {}

func (x *RemovePortAclRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePortAclRequest.ProtoReflect.Descriptor instead.
func (*RemovePortAclRequest) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{14}
}

func (x *RemovePortAclRequest) GetDpName() string {
	if x != nil {
		return x.DpName
	}
	return ""
}

func (x *RemovePortAclRequest) GetPortNo() uint32 {
	if x != nil {
		return x.PortNo
	}
	return 0
}

func (x *RemovePortAclRequest) GetAcl() string {
	if x != nil {
		return x.Acl
	}
	return ""
}

type RemovePortAclReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemovePortAclReply) Reset() {
	*x = RemovePortAclReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePortAclReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePortAclReply) ProtoMessage() {}

func (x *RemovePortAclReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePortAclReply.ProtoReflect.Descriptor instead.
func (*RemovePortAclReply) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{15}
}

type SetInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortNo     uint32 `protobuf:"varint,1,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
	ConfigYaml string `protobuf:"bytes,2,opt,name=config_yaml,json=configYaml,proto3" json:"config_yaml,omitempty"`
}

func (x *SetInterface) Reset() {
	*x = SetInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInterface) ProtoMessage() {}

func (x *SetInterface) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInterface.ProtoReflect.Descriptor instead.
func (*SetInterface) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{16}
}

func (x *SetInterface) GetPortNo() uint32 {
	if x != nil {
		return x.PortNo
	}
	return 0
}

func (x *SetInterface) GetConfigYaml() string {
	if x != nil {
		return x.ConfigYaml
	}
	return ""
}

type SetDpInterfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DpName          string          `protobuf:"bytes,1,opt,name=dp_name,json=dpName,proto3" json:"dp_name,omitempty"`
	InterfaceConfig []*SetInterface `protobuf:"bytes,2,rep,name=interface_config,json=interfaceConfig,proto3" json:"interface_config,omitempty"`
}

func (x *SetDpInterfaces) Reset() {
	*x = SetDpInterfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDpInterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDpInterfaces) ProtoMessage() {}

func (x *SetDpInterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDpInterfaces.ProtoReflect.Descriptor instead.
func (*SetDpInterfaces) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{17}
}

func (x *SetDpInterfaces) GetDpName() string {
	if x != nil {
		return x.DpName
	}
	return ""
}

func (x *SetDpInterfaces) GetInterfaceConfig() []*SetInterface {
	if x != nil {
		return x.InterfaceConfig
	}
	return nil
}

// Set/replace config for any number of DPs/interfaces.
type SetDpInterfacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfacesConfig []*SetDpInterfaces `protobuf:"bytes,1,rep,name=interfaces_config,json=interfacesConfig,proto3" json:"interfaces_config,omitempty"`
}

func (x *SetDpInterfacesRequest) Reset() {
	*x = SetDpInterfacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDpInterfacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDpInterfacesRequest) ProtoMessage() {}

func (x *SetDpInterfacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDpInterfacesRequest.ProtoReflect.Descriptor instead.
func (*SetDpInterfacesRequest) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{18}
}

func (x *SetDpInterfacesRequest) GetInterfacesConfig() []*SetDpInterfaces {
	if x != nil {
		return x.InterfacesConfig
	}
	return nil
}

type SetDpInterfacesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetDpInterfacesReply) Reset() {
	*x = SetDpInterfacesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDpInterfacesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDpInterfacesReply) ProtoMessage() {}

func (x *SetDpInterfacesReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDpInterfacesReply.ProtoReflect.Descriptor instead.
func (*SetDpInterfacesReply) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{19}
}

// Request DP info.
type GetDpInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: if specified, only info about this DP will be returned, otherwise all DPs.
	DpName string `protobuf:"bytes,1,opt,name=dp_name,json=dpName,proto3" json:"dp_name,omitempty"`
	// Optional: look up DPs in only this YAML file.
	ConfigFilename string `protobuf:"bytes,2,opt,name=config_filename,json=configFilename,proto3" json:"config_filename,omitempty"`
}

func (x *GetDpInfoRequest) Reset() {
	*x = GetDpInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDpInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDpInfoRequest) ProtoMessage() {}

func (x *GetDpInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDpInfoRequest.ProtoReflect.Descriptor instead.
func (*GetDpInfoRequest) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{20}
}

func (x *GetDpInfoRequest) GetDpName() string {
	if x != nil {
		return x.DpName
	}
	return ""
}

func (x *GetDpInfoRequest) GetConfigFilename() string {
	if x != nil {
		return x.ConfigFilename
	}
	return ""
}

type InterfaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortNo      int32  `protobuf:"varint,1,opt,name=port_no,json=portNo,proto3" json:"port_no,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *InterfaceInfo) Reset() {
	*x = InterfaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInfo) ProtoMessage() {}

func (x *InterfaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInfo.ProtoReflect.Descriptor instead.
func (*InterfaceInfo) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{21}
}

func (x *InterfaceInfo) GetPortNo() int32 {
	if x != nil {
		return x.PortNo
	}
	return 0
}

func (x *InterfaceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterfaceInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type DpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DpId        uint64           `protobuf:"varint,2,opt,name=dp_id,json=dpId,proto3" json:"dp_id,omitempty"`
	Description string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Interfaces  []*InterfaceInfo `protobuf:"bytes,4,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *DpInfo) Reset() {
	*x = DpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpInfo) ProtoMessage() {}

func (x *DpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpInfo.ProtoReflect.Descriptor instead.
func (*DpInfo) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{22}
}

func (x *DpInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DpInfo) GetDpId() uint64 {
	if x != nil {
		return x.DpId
	}
	return 0
}

func (x *DpInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DpInfo) GetInterfaces() []*InterfaceInfo {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type GetDpInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dps []*DpInfo `protobuf:"bytes,1,rep,name=dps,proto3" json:"dps,omitempty"`
}

func (x *GetDpInfoReply) Reset() {
	*x = GetDpInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDpInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDpInfoReply) ProtoMessage() {}

func (x *GetDpInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDpInfoReply.ProtoReflect.Descriptor instead.
func (*GetDpInfoReply) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{23}
}

func (x *GetDpInfoReply) GetDps() []*DpInfo {
	if x != nil {
		return x.Dps
	}
	return nil
}

type DelDpInterfacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfacesConfig []*DpInfo `protobuf:"bytes,1,rep,name=interfaces_config,json=interfacesConfig,proto3" json:"interfaces_config,omitempty"`
	DeleteEmptyDp    bool      `protobuf:"varint,2,opt,name=delete_empty_dp,json=deleteEmptyDp,proto3" json:"delete_empty_dp,omitempty"`
}

func (x *DelDpInterfacesRequest) Reset() {
	*x = DelDpInterfacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDpInterfacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDpInterfacesRequest) ProtoMessage() {}

func (x *DelDpInterfacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDpInterfacesRequest.ProtoReflect.Descriptor instead.
func (*DelDpInterfacesRequest) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{24}
}

func (x *DelDpInterfacesRequest) GetInterfacesConfig() []*DpInfo {
	if x != nil {
		return x.InterfacesConfig
	}
	return nil
}

func (x *DelDpInterfacesRequest) GetDeleteEmptyDp() bool {
	if x != nil {
		return x.DeleteEmptyDp
	}
	return false
}

type DelDpInterfacesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelDpInterfacesReply) Reset() {
	*x = DelDpInterfacesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDpInterfacesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDpInterfacesReply) ProtoMessage() {}

func (x *DelDpInterfacesReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDpInterfacesReply.ProtoReflect.Descriptor instead.
func (*DelDpInterfacesReply) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{25}
}

type DelDpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfacesConfig []*DpInfo `protobuf:"bytes,1,rep,name=interfaces_config,json=interfacesConfig,proto3" json:"interfaces_config,omitempty"`
}

func (x *DelDpsRequest) Reset() {
	*x = DelDpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDpsRequest) ProtoMessage() {}

func (x *DelDpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDpsRequest.ProtoReflect.Descriptor instead.
func (*DelDpsRequest) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{26}
}

func (x *DelDpsRequest) GetInterfacesConfig() []*DpInfo {
	if x != nil {
		return x.InterfacesConfig
	}
	return nil
}

type DelDpsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelDpsReply) Reset() {
	*x = DelDpsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDpsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDpsReply) ProtoMessage() {}

func (x *DelDpsReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDpsReply.ProtoReflect.Descriptor instead.
func (*DelDpsReply) Descriptor() ([]byte, []int) {
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP(), []int{27}
}

var File_protos_faucetconfrpc_faucetconfrpc_proto protoreflect.FileDescriptor

var file_protos_faucetconfrpc_faucetconfrpc_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63,
	0x6f, 0x6e, 0x66, 0x72, 0x70, 0x63, 0x2f, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e,
	0x66, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x66, 0x61, 0x75, 0x63,
	0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x79, 0x61,
	0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x59, 0x61, 0x6d, 0x6c, 0x22, 0xa7, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x59, 0x61, 0x6d, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x2f, 0x0a,
	0x14, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x79, 0x61, 0x6d, 0x6c,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x59, 0x61, 0x6d, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x14,
	0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x6d, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x59, 0x61, 0x6d, 0x6c, 0x4b,
	0x65, 0x79, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x6e, 0x0a,
	0x14, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x22, 0x14, 0x0a,
	0x12, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x71, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x59, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x57, 0x0a,
	0x11, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x5a, 0x0a, 0x14, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x63, 0x6c, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x48, 0x0a, 0x0c, 0x53,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x79,
	0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x59, 0x61, 0x6d, 0x6c, 0x22, 0x75, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x44, 0x70, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x49, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x61,
	0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x68, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x44, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x44, 0x70, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x54,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x06, 0x44, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x64, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x44, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a,
	0x03, 0x64, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x61, 0x75,
	0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x64, 0x70, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x44, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x64, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x44, 0x70, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x44, 0x70, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x56, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x44, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x11,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74,
	0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x44, 0x70, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x32, 0x8c, 0x09, 0x0a, 0x10, 0x46, 0x61, 0x75, 0x63, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65,
	0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x66, 0x61, 0x75, 0x63,
	0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2a,
	0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x66, 0x61, 0x75,
	0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x72,
	0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74,
	0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x2e, 0x66, 0x61,
	0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63,
	0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x56, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x6c, 0x12,
	0x23, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e,
	0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x41,
	0x63, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0d, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x6c, 0x12, 0x26, 0x2e, 0x66, 0x61, 0x75,
	0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x41, 0x63, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0a, 0x53, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x6c, 0x12, 0x23, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65,
	0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x65, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x44, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f,
	0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x70, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x44, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63,
	0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x66, 0x61, 0x75,
	0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x44, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x28, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66, 0x61,
	0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x6c, 0x44, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x44, 0x70, 0x73, 0x12,
	0x1f, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x3b, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x63, 0x6f, 0x6e,
	0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescOnce sync.Once
	file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescData = file_protos_faucetconfrpc_faucetconfrpc_proto_rawDesc
)

func file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescGZIP() []byte {
	file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescOnce.Do(func() {
		file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescData)
	})
	return file_protos_faucetconfrpc_faucetconfrpc_proto_rawDescData
}

var file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_protos_faucetconfrpc_faucetconfrpc_proto_goTypes = []interface{}{
	(*GetConfigFileRequest)(nil),     // 0: faucetconfserver.GetConfigFileRequest
	(*GetConfigFileReply)(nil),       // 1: faucetconfserver.GetConfigFileReply
	(*SetConfigFileRequest)(nil),     // 2: faucetconfserver.SetConfigFileRequest
	(*SetConfigFileReply)(nil),       // 3: faucetconfserver.SetConfigFileReply
	(*DelConfigFromFileRequest)(nil), // 4: faucetconfserver.DelConfigFromFileRequest
	(*DelConfigFromFileReply)(nil),   // 5: faucetconfserver.DelConfigFromFileReply
	(*AddPortMirrorRequest)(nil),     // 6: faucetconfserver.AddPortMirrorRequest
	(*AddPortMirrorReply)(nil),       // 7: faucetconfserver.AddPortMirrorReply
	(*RemovePortMirrorRequest)(nil),  // 8: faucetconfserver.RemovePortMirrorRequest
	(*RemovePortMirrorReply)(nil),    // 9: faucetconfserver.RemovePortMirrorReply
	(*SetPortAclRequest)(nil),        // 10: faucetconfserver.SetPortAclRequest
	(*SetPortAclReply)(nil),          // 11: faucetconfserver.SetPortAclReply
	(*AddPortAclRequest)(nil),        // 12: faucetconfserver.AddPortAclRequest
	(*AddPortAclReply)(nil),          // 13: faucetconfserver.AddPortAclReply
	(*RemovePortAclRequest)(nil),     // 14: faucetconfserver.RemovePortAclRequest
	(*RemovePortAclReply)(nil),       // 15: faucetconfserver.RemovePortAclReply
	(*SetInterface)(nil),             // 16: faucetconfserver.SetInterface
	(*SetDpInterfaces)(nil),          // 17: faucetconfserver.SetDpInterfaces
	(*SetDpInterfacesRequest)(nil),   // 18: faucetconfserver.SetDpInterfacesRequest
	(*SetDpInterfacesReply)(nil),     // 19: faucetconfserver.SetDpInterfacesReply
	(*GetDpInfoRequest)(nil),         // 20: faucetconfserver.GetDpInfoRequest
	(*InterfaceInfo)(nil),            // 21: faucetconfserver.InterfaceInfo
	(*DpInfo)(nil),                   // 22: faucetconfserver.DpInfo
	(*GetDpInfoReply)(nil),           // 23: faucetconfserver.GetDpInfoReply
	(*DelDpInterfacesRequest)(nil),   // 24: faucetconfserver.DelDpInterfacesRequest
	(*DelDpInterfacesReply)(nil),     // 25: faucetconfserver.DelDpInterfacesReply
	(*DelDpsRequest)(nil),            // 26: faucetconfserver.DelDpsRequest
	(*DelDpsReply)(nil),              // 27: faucetconfserver.DelDpsReply
}
var file_protos_faucetconfrpc_faucetconfrpc_proto_depIdxs = []int32{
	16, // 0: faucetconfserver.SetDpInterfaces.interface_config:type_name -> faucetconfserver.SetInterface
	17, // 1: faucetconfserver.SetDpInterfacesRequest.interfaces_config:type_name -> faucetconfserver.SetDpInterfaces
	21, // 2: faucetconfserver.DpInfo.interfaces:type_name -> faucetconfserver.InterfaceInfo
	22, // 3: faucetconfserver.GetDpInfoReply.dps:type_name -> faucetconfserver.DpInfo
	22, // 4: faucetconfserver.DelDpInterfacesRequest.interfaces_config:type_name -> faucetconfserver.DpInfo
	22, // 5: faucetconfserver.DelDpsRequest.interfaces_config:type_name -> faucetconfserver.DpInfo
	0,  // 6: faucetconfserver.FaucetConfServer.GetConfigFile:input_type -> faucetconfserver.GetConfigFileRequest
	2,  // 7: faucetconfserver.FaucetConfServer.SetConfigFile:input_type -> faucetconfserver.SetConfigFileRequest
	4,  // 8: faucetconfserver.FaucetConfServer.DelConfigFromFile:input_type -> faucetconfserver.DelConfigFromFileRequest
	6,  // 9: faucetconfserver.FaucetConfServer.AddPortMirror:input_type -> faucetconfserver.AddPortMirrorRequest
	8,  // 10: faucetconfserver.FaucetConfServer.RemovePortMirror:input_type -> faucetconfserver.RemovePortMirrorRequest
	12, // 11: faucetconfserver.FaucetConfServer.AddPortAcl:input_type -> faucetconfserver.AddPortAclRequest
	14, // 12: faucetconfserver.FaucetConfServer.RemovePortAcl:input_type -> faucetconfserver.RemovePortAclRequest
	10, // 13: faucetconfserver.FaucetConfServer.SetPortAcl:input_type -> faucetconfserver.SetPortAclRequest
	18, // 14: faucetconfserver.FaucetConfServer.SetDpInterfaces:input_type -> faucetconfserver.SetDpInterfacesRequest
	20, // 15: faucetconfserver.FaucetConfServer.GetDpInfo:input_type -> faucetconfserver.GetDpInfoRequest
	24, // 16: faucetconfserver.FaucetConfServer.DelDpInterfaces:input_type -> faucetconfserver.DelDpInterfacesRequest
	26, // 17: faucetconfserver.FaucetConfServer.DelDps:input_type -> faucetconfserver.DelDpsRequest
	1,  // 18: faucetconfserver.FaucetConfServer.GetConfigFile:output_type -> faucetconfserver.GetConfigFileReply
	3,  // 19: faucetconfserver.FaucetConfServer.SetConfigFile:output_type -> faucetconfserver.SetConfigFileReply
	5,  // 20: faucetconfserver.FaucetConfServer.DelConfigFromFile:output_type -> faucetconfserver.DelConfigFromFileReply
	7,  // 21: faucetconfserver.FaucetConfServer.AddPortMirror:output_type -> faucetconfserver.AddPortMirrorReply
	9,  // 22: faucetconfserver.FaucetConfServer.RemovePortMirror:output_type -> faucetconfserver.RemovePortMirrorReply
	13, // 23: faucetconfserver.FaucetConfServer.AddPortAcl:output_type -> faucetconfserver.AddPortAclReply
	15, // 24: faucetconfserver.FaucetConfServer.RemovePortAcl:output_type -> faucetconfserver.RemovePortAclReply
	11, // 25: faucetconfserver.FaucetConfServer.SetPortAcl:output_type -> faucetconfserver.SetPortAclReply
	19, // 26: faucetconfserver.FaucetConfServer.SetDpInterfaces:output_type -> faucetconfserver.SetDpInterfacesReply
	23, // 27: faucetconfserver.FaucetConfServer.GetDpInfo:output_type -> faucetconfserver.GetDpInfoReply
	25, // 28: faucetconfserver.FaucetConfServer.DelDpInterfaces:output_type -> faucetconfserver.DelDpInterfacesReply
	27, // 29: faucetconfserver.FaucetConfServer.DelDps:output_type -> faucetconfserver.DelDpsReply
	18, // [18:30] is the sub-list for method output_type
	6,  // [6:18] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_protos_faucetconfrpc_faucetconfrpc_proto_init() }
func file_protos_faucetconfrpc_faucetconfrpc_proto_init() {
	if File_protos_faucetconfrpc_faucetconfrpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigFileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigFileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelConfigFromFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelConfigFromFileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPortMirrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPortMirrorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePortMirrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePortMirrorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPortAclRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPortAclReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPortAclRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPortAclReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePortAclRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePortAclReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDpInterfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDpInterfacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDpInterfacesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDpInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDpInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelDpInterfacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelDpInterfacesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelDpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelDpsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_faucetconfrpc_faucetconfrpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_faucetconfrpc_faucetconfrpc_proto_goTypes,
		DependencyIndexes: file_protos_faucetconfrpc_faucetconfrpc_proto_depIdxs,
		MessageInfos:      file_protos_faucetconfrpc_faucetconfrpc_proto_msgTypes,
	}.Build()
	File_protos_faucetconfrpc_faucetconfrpc_proto = out.File
	file_protos_faucetconfrpc_faucetconfrpc_proto_rawDesc = nil
	file_protos_faucetconfrpc_faucetconfrpc_proto_goTypes = nil
	file_protos_faucetconfrpc_faucetconfrpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FaucetConfServerClient is the client API for FaucetConfServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaucetConfServerClient interface {
	GetConfigFile(ctx context.Context, in *GetConfigFileRequest, opts ...grpc.CallOption) (*GetConfigFileReply, error)
	SetConfigFile(ctx context.Context, in *SetConfigFileRequest, opts ...grpc.CallOption) (*SetConfigFileReply, error)
	DelConfigFromFile(ctx context.Context, in *DelConfigFromFileRequest, opts ...grpc.CallOption) (*DelConfigFromFileReply, error)
	AddPortMirror(ctx context.Context, in *AddPortMirrorRequest, opts ...grpc.CallOption) (*AddPortMirrorReply, error)
	RemovePortMirror(ctx context.Context, in *RemovePortMirrorRequest, opts ...grpc.CallOption) (*RemovePortMirrorReply, error)
	AddPortAcl(ctx context.Context, in *AddPortAclRequest, opts ...grpc.CallOption) (*AddPortAclReply, error)
	RemovePortAcl(ctx context.Context, in *RemovePortAclRequest, opts ...grpc.CallOption) (*RemovePortAclReply, error)
	SetPortAcl(ctx context.Context, in *SetPortAclRequest, opts ...grpc.CallOption) (*SetPortAclReply, error)
	SetDpInterfaces(ctx context.Context, in *SetDpInterfacesRequest, opts ...grpc.CallOption) (*SetDpInterfacesReply, error)
	GetDpInfo(ctx context.Context, in *GetDpInfoRequest, opts ...grpc.CallOption) (*GetDpInfoReply, error)
	DelDpInterfaces(ctx context.Context, in *DelDpInterfacesRequest, opts ...grpc.CallOption) (*DelDpInterfacesReply, error)
	DelDps(ctx context.Context, in *DelDpsRequest, opts ...grpc.CallOption) (*DelDpsReply, error)
}

type faucetConfServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFaucetConfServerClient(cc grpc.ClientConnInterface) FaucetConfServerClient {
	return &faucetConfServerClient{cc}
}

func (c *faucetConfServerClient) GetConfigFile(ctx context.Context, in *GetConfigFileRequest, opts ...grpc.CallOption) (*GetConfigFileReply, error) {
	out := new(GetConfigFileReply)
	err := c.cc.Invoke(ctx, "/faucetconfserver.FaucetConfServer/GetConfigFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) SetConfigFile(ctx context.Context, in *SetConfigFileRequest, opts ...grpc.CallOption) (*SetConfigFileReply, error) {
	out := new(SetConfigFileReply)
	err := c.cc.Invoke(ctx, "/faucetconfserver.FaucetConfServer/SetConfigFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) DelConfigFromFile(ctx context.Context, in *DelConfigFromFileRequest, opts ...grpc.CallOption) (*DelConfigFromFileReply, error) {
	out := new(DelConfigFromFileReply)
	err := c.cc.Invoke(ctx, "/faucetconfserver.FaucetConfServer/DelConfigFromFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) AddPortMirror(ctx context.Context, in *AddPortMirrorRequest, opts ...grpc.CallOption) (*AddPortMirrorReply, error) {
	out := new(AddPortMirrorReply)
	err := c.cc.Invoke(ctx, "/faucetconfserver.FaucetConfServer/AddPortMirror", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) RemovePortMirror(ctx context.Context, in *RemovePortMirrorRequest, opts ...grpc.CallOption) (*RemovePortMirrorReply, error) {
	out := new(RemovePortMirrorReply)
	err := c.cc.Invoke(ctx, "/faucetconfserver.FaucetConfServer/RemovePortMirror", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) AddPortAcl(ctx context.Context, in *AddPortAclRequest, opts ...grpc.CallOption) (*AddPortAclReply, error) {
	out := new(AddPortAclReply)
	err := c.cc.Invoke(ctx, "/faucetconfserver.FaucetConfServer/AddPortAcl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) RemovePortAcl(ctx context.Context, in *RemovePortAclRequest, opts ...grpc.CallOption) (*RemovePortAclReply, error) {
	out := new(RemovePortAclReply)
	err := c.cc.Invoke(ctx, "/faucetconfserver.FaucetConfServer/RemovePortAcl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) SetPortAcl(ctx context.Context, in *SetPortAclRequest, opts ...grpc.CallOption) (*SetPortAclReply, error) {
	out := new(SetPortAclReply)
	err := c.cc.Invoke(ctx, "/faucetconfserver.FaucetConfServer/SetPortAcl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) SetDpInterfaces(ctx context.Context, in *SetDpInterfacesRequest, opts ...grpc.CallOption) (*SetDpInterfacesReply, error) {
	out := new(SetDpInterfacesReply)
	err := c.cc.Invoke(ctx, "/faucetconfserver.FaucetConfServer/SetDpInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) GetDpInfo(ctx context.Context, in *GetDpInfoRequest, opts ...grpc.CallOption) (*GetDpInfoReply, error) {
	out := new(GetDpInfoReply)
	err := c.cc.Invoke(ctx, "/faucetconfserver.FaucetConfServer/GetDpInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) DelDpInterfaces(ctx context.Context, in *DelDpInterfacesRequest, opts ...grpc.CallOption) (*DelDpInterfacesReply, error) {
	out := new(DelDpInterfacesReply)
	err := c.cc.Invoke(ctx, "/faucetconfserver.FaucetConfServer/DelDpInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) DelDps(ctx context.Context, in *DelDpsRequest, opts ...grpc.CallOption) (*DelDpsReply, error) {
	out := new(DelDpsReply)
	err := c.cc.Invoke(ctx, "/faucetconfserver.FaucetConfServer/DelDps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaucetConfServerServer is the server API for FaucetConfServer service.
type FaucetConfServerServer interface {
	GetConfigFile(context.Context, *GetConfigFileRequest) (*GetConfigFileReply, error)
	SetConfigFile(context.Context, *SetConfigFileRequest) (*SetConfigFileReply, error)
	DelConfigFromFile(context.Context, *DelConfigFromFileRequest) (*DelConfigFromFileReply, error)
	AddPortMirror(context.Context, *AddPortMirrorRequest) (*AddPortMirrorReply, error)
	RemovePortMirror(context.Context, *RemovePortMirrorRequest) (*RemovePortMirrorReply, error)
	AddPortAcl(context.Context, *AddPortAclRequest) (*AddPortAclReply, error)
	RemovePortAcl(context.Context, *RemovePortAclRequest) (*RemovePortAclReply, error)
	SetPortAcl(context.Context, *SetPortAclRequest) (*SetPortAclReply, error)
	SetDpInterfaces(context.Context, *SetDpInterfacesRequest) (*SetDpInterfacesReply, error)
	GetDpInfo(context.Context, *GetDpInfoRequest) (*GetDpInfoReply, error)
	DelDpInterfaces(context.Context, *DelDpInterfacesRequest) (*DelDpInterfacesReply, error)
	DelDps(context.Context, *DelDpsRequest) (*DelDpsReply, error)
}

// UnimplementedFaucetConfServerServer can be embedded to have forward compatible implementations.
type UnimplementedFaucetConfServerServer struct {
}

func (*UnimplementedFaucetConfServerServer) GetConfigFile(context.Context, *GetConfigFileRequest) (*GetConfigFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigFile not implemented")
}
func (*UnimplementedFaucetConfServerServer) SetConfigFile(context.Context, *SetConfigFileRequest) (*SetConfigFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfigFile not implemented")
}
func (*UnimplementedFaucetConfServerServer) DelConfigFromFile(context.Context, *DelConfigFromFileRequest) (*DelConfigFromFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelConfigFromFile not implemented")
}
func (*UnimplementedFaucetConfServerServer) AddPortMirror(context.Context, *AddPortMirrorRequest) (*AddPortMirrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPortMirror not implemented")
}
func (*UnimplementedFaucetConfServerServer) RemovePortMirror(context.Context, *RemovePortMirrorRequest) (*RemovePortMirrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePortMirror not implemented")
}
func (*UnimplementedFaucetConfServerServer) AddPortAcl(context.Context, *AddPortAclRequest) (*AddPortAclReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPortAcl not implemented")
}
func (*UnimplementedFaucetConfServerServer) RemovePortAcl(context.Context, *RemovePortAclRequest) (*RemovePortAclReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePortAcl not implemented")
}
func (*UnimplementedFaucetConfServerServer) SetPortAcl(context.Context, *SetPortAclRequest) (*SetPortAclReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPortAcl not implemented")
}
func (*UnimplementedFaucetConfServerServer) SetDpInterfaces(context.Context, *SetDpInterfacesRequest) (*SetDpInterfacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDpInterfaces not implemented")
}
func (*UnimplementedFaucetConfServerServer) GetDpInfo(context.Context, *GetDpInfoRequest) (*GetDpInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDpInfo not implemented")
}
func (*UnimplementedFaucetConfServerServer) DelDpInterfaces(context.Context, *DelDpInterfacesRequest) (*DelDpInterfacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDpInterfaces not implemented")
}
func (*UnimplementedFaucetConfServerServer) DelDps(context.Context, *DelDpsRequest) (*DelDpsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDps not implemented")
}

func RegisterFaucetConfServerServer(s *grpc.Server, srv FaucetConfServerServer) {
	s.RegisterService(&_FaucetConfServer_serviceDesc, srv)
}

func _FaucetConfServer_GetConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).GetConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faucetconfserver.FaucetConfServer/GetConfigFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).GetConfigFile(ctx, req.(*GetConfigFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_SetConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).SetConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faucetconfserver.FaucetConfServer/SetConfigFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).SetConfigFile(ctx, req.(*SetConfigFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_DelConfigFromFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelConfigFromFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).DelConfigFromFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faucetconfserver.FaucetConfServer/DelConfigFromFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).DelConfigFromFile(ctx, req.(*DelConfigFromFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_AddPortMirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPortMirrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).AddPortMirror(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faucetconfserver.FaucetConfServer/AddPortMirror",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).AddPortMirror(ctx, req.(*AddPortMirrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_RemovePortMirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePortMirrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).RemovePortMirror(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faucetconfserver.FaucetConfServer/RemovePortMirror",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).RemovePortMirror(ctx, req.(*RemovePortMirrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_AddPortAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPortAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).AddPortAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faucetconfserver.FaucetConfServer/AddPortAcl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).AddPortAcl(ctx, req.(*AddPortAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_RemovePortAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePortAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).RemovePortAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faucetconfserver.FaucetConfServer/RemovePortAcl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).RemovePortAcl(ctx, req.(*RemovePortAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_SetPortAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPortAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).SetPortAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faucetconfserver.FaucetConfServer/SetPortAcl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).SetPortAcl(ctx, req.(*SetPortAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_SetDpInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDpInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).SetDpInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faucetconfserver.FaucetConfServer/SetDpInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).SetDpInterfaces(ctx, req.(*SetDpInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_GetDpInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDpInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).GetDpInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faucetconfserver.FaucetConfServer/GetDpInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).GetDpInfo(ctx, req.(*GetDpInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_DelDpInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDpInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).DelDpInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faucetconfserver.FaucetConfServer/DelDpInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).DelDpInterfaces(ctx, req.(*DelDpInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_DelDps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).DelDps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faucetconfserver.FaucetConfServer/DelDps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).DelDps(ctx, req.(*DelDpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FaucetConfServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "faucetconfserver.FaucetConfServer",
	HandlerType: (*FaucetConfServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigFile",
			Handler:    _FaucetConfServer_GetConfigFile_Handler,
		},
		{
			MethodName: "SetConfigFile",
			Handler:    _FaucetConfServer_SetConfigFile_Handler,
		},
		{
			MethodName: "DelConfigFromFile",
			Handler:    _FaucetConfServer_DelConfigFromFile_Handler,
		},
		{
			MethodName: "AddPortMirror",
			Handler:    _FaucetConfServer_AddPortMirror_Handler,
		},
		{
			MethodName: "RemovePortMirror",
			Handler:    _FaucetConfServer_RemovePortMirror_Handler,
		},
		{
			MethodName: "AddPortAcl",
			Handler:    _FaucetConfServer_AddPortAcl_Handler,
		},
		{
			MethodName: "RemovePortAcl",
			Handler:    _FaucetConfServer_RemovePortAcl_Handler,
		},
		{
			MethodName: "SetPortAcl",
			Handler:    _FaucetConfServer_SetPortAcl_Handler,
		},
		{
			MethodName: "SetDpInterfaces",
			Handler:    _FaucetConfServer_SetDpInterfaces_Handler,
		},
		{
			MethodName: "GetDpInfo",
			Handler:    _FaucetConfServer_GetDpInfo_Handler,
		},
		{
			MethodName: "DelDpInterfaces",
			Handler:    _FaucetConfServer_DelDpInterfaces_Handler,
		},
		{
			MethodName: "DelDps",
			Handler:    _FaucetConfServer_DelDps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/faucetconfrpc/faucetconfrpc.proto",
}
